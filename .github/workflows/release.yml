on: 
  push:
    tags:
      - '*' # any tag

name: Release Build

jobs:
  build:
    runs-on: windows-2019
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - id: tagName
        name: Get tag name
        uses: olegtarasov/get-tag@v2.1.2 #puts the tag name in $

      - id: projectselection
        name: Set build and test projects by tag
        run: |
          if ($env:GIT_TAG_NAME -match '(?<Name>[a-z]+)(?<Version>([0-9]+\.){1,3}[0-9]+)')
          {
            "Name: $($Matches.Name), version: $($Matches.Version)"
            $projects = @()
            $testprojects = @()
            switch ($Matches.Name)
            {
              "barnite" {
                $projects = @("Barnite")
              }
              "gamersgate" {
                $projects = @("GamersGateLibrary")
              }
              "gamessizecalculator" {
                $projects = @("GamesSizeCalculator")
              }
              "groupees" {
                $projects = @("GroupeesLibrary")
              }
              "ign" {
                $projects = @("IgnMetadata")
              }
              "itchiobundletagger" {
                $projects = @("itchIoBundleTagger")
              }
              "legacygames" {
                $projects = @("LegacyGamesLibrary")
              }
              "pathreplacer" {
                $projects = @("PathReplacer")
              }
              "rawg" {
                $projects = @("RawgLibrary", "RawgMetadata")
              }
              "steamactions" {
                $projects = @("SteamActions")
              }
              "steamtagsimporter" {
                $projects = @("SteamTagsImporter")
              }
              "viveport" {
                $projects = @("ViveportLibrary")
              }
            }
            foreach ($p in $projects){
              if (Test-Path "$Env:GITHUB_WORKSPACE\source\$p.Tests" -PathType Container){
                $testprojects += "$p.Tests"
              }
            }
            echo "tagname=$($Matches.Name)" >> $env:GITHUB_OUTPUT
            echo "tagver=$($Matches.Version)" >> $env:GITHUB_OUTPUT
            echo "projects=$($projects | ConvertTo-Json -Compress)" >> $env:GITHUB_OUTPUT
            echo "testprojects=$($testprojects | ConvertTo-Json -Compress)" >> $env:GITHUB_OUTPUT
          }

      - name: Setup Nuget.exe
        uses: NuGet/setup-nuget@v1

      - name: Nuget Restore 
        run: nuget restore .\source\PlayniteExtensions.sln

      - name: Build (DotNET4.6.2)
        run: |
           cd "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\"
           .\MSBuild.exe $Env:GITHUB_WORKSPACE\source\PlayniteExtensions.sln -p:Configuration=Release -restore -clp:ErrorsOnly

      - name: Run unit tests
        run: |
          $testprojects = ConvertFrom-Json '${{ steps.projectselection.outputs.testprojects }}'
          $runnerpath = "$Env:GITHUB_WORKSPACE\source\packages\xunit.runner.console.2.4.2\tools\net462\xunit.console.x86.exe"
          foreach ($tp in $testprojects){
            "Executing tests in project: $tp"
            & $runnerpath "$Env:GITHUB_WORKSPACE\source\$tp\bin\Release\$tp.dll"
          }

      - name: Setup Playnite
        run: |
           Invoke-WebRequest -Uri "https://github.com/JosefNemec/Playnite/releases/download/10.9/Playnite109.zip" -OutFile "$Env:GITHUB_WORKSPACE\Playnite.zip"
           Expand-Archive "$Env:GITHUB_WORKSPACE\Playnite.zip" -DestinationPath "$Env:GITHUB_WORKSPACE\Playnite"

      - name: Pack with Playnite
        run: |
          mkdir "PackingOutput"
          $projects = ConvertFrom-Json '${{ steps.projectselection.outputs.projects }}'
          $ver = '${{ steps.projectselection.outputs.tagver }}' -replace '\.', '_'

          foreach ($p in $projects) {
            "Packing project: $p"
            & "$Env:GITHUB_WORKSPACE\Playnite\Toolbox.exe" pack "$Env:GITHUB_WORKSPACE\source\$p\bin\Release\" "$Env:GITHUB_WORKSPACE\PackingOutput"            
            Get-ChildItem "$Env:GITHUB_WORKSPACE\PackingOutput" -Filter *.pext | Rename-Item -NewName "${p}_$ver.pext"
            Move-Item -Path "$Env:GITHUB_WORKSPACE\PackingOutput\*.pext" -Destination "$Env:GITHUB_WORKSPACE\"
          }

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          name: "${{ steps.projectselection.outputs.tagname }} ${{ steps.projectselection.outputs.tagver }}"
          files: |
            *.pext